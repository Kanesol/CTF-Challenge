<?php

namespace App\Http\Controllers;

use Auth;
use Illuminate\Routing\Controller;
use Illuminate\Http\Request;
use Validator;
use App\User;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;
use Illuminate\Contracts\Auth\Guard;


class AuthController extends Controller
{

    use AuthenticatesAndRegistersUsers, ThrottlesLogins;

    protected $redirectTo = '/';

    /**
     * the model instance
     * @var User
     */
    protected $user; 
    /**
     * The Guard implementation.
     *
     * @var Authenticator
     */
    protected $auth;
 
    /**
     * Create a new authentication controller instance.
     *
     * @param  Authenticator  $auth
     * @return void
     */
    public function __construct(Guard $auth, User $user)
    {
        $this->user = $user; 
        $this->auth = $auth;
 
        $this->middleware('guest', ['except' => ['getLogout']]); 
    }


    /**
     * Handle an authentication attempt.
     *
     * @return Response
     */
    public function authenticate(Request $request)
    {
        if (Auth::attempt(['name' =>  $request->input('name'), 'token' =>  $request->input('token')])) {
            // Authentication passed...
            return redirect()->intended('/');
        }
    }

    public function postLogin(Request $request)
    {
        if ($this->auth->attempt($request->only('name', 'token')))
        {
            return redirect('/');
        }
 
        return redirect('/auth/login')->withErrors([
            'email' => "Error is" . $request . ";",
        ]);
    }

    public function getRegister()
    {
        return view('auth.register');
    }

    /**
     * Handle a registration request for the application.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
   /*public function postRegister(Request $request)
    {
        $validator = Validator::make($request->all(), [
                'name' => 'required|unique:users,name|max:7',
                'token' => 'required|max:20|regex:/Y15CTFSUN$/i',
        ]); //need to fix this

        if($validator->fails()) {
            return redirect('auth/register')
            ->withErrors($validator)
            ->withInput();
        }
        
        Auth::login($this->create($request->all()));

        return redirect($this->redirectPath());
    }*/

    protected function validator(array $data)
    {
        var_dump($data);
        return Validator::make($data, [
            'name' => 'required|unique:users,name|max:7',
            'token' => 'required|max:20|regex:/Y15CTFSUN$/i',
            ]);
    }


    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'token' => bcrypt($data['token']),
        ]);
    }

    protected function getCredentials(Request $request)
    {
        return $request->only($this->loginUsername(), 'token');
    }

    public function loginUsername()
    {
        return property_exists($this, 'token') ? $this->token : 'token';
    }
}